Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109

class Solution {
    public int majorityElement(int[] nums) {
     Map<Integer, Integer> hash = new HashMap<>();
        int majorityCount = nums.length / 2;

        // Populate the HashMap with frequencies of elements
        for (int num : nums) {
            hash.put(num, hash.getOrDefault(num, 0) + 1);
            
            // Check if the current element is the majority element
            if (hash.get(num) > majorityCount) {
                return num;  // Return the element as soon as it becomes a majority
            }
        }
        
        return -1; 
    }
}
